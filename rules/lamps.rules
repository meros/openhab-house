import org.openhab.model.script.actions.Timer

// Configuration
var int motionBufferMinutes = 15
var int sunMinElevation = 15
var Timer motionTimer = null
var boolean oldLampsOn = false
var int hoursBeforeForceOnTimeout = 4
var Timer forceOnTimer = null

// Rule to control motion switch, it is based on a motion sensor but 'buffered' 
// to keep motion on for x minutes after detected motion ends
rule "Motion downstairs"
when
Item MotionKitchen received update
then
	// Always reset timer when state changes
	if (motionTimer != null) {
		motionTimer.cancel
		motionTimer = null
	}
	
	if (MotionKitchen.state == CLOSED) {
		// If state is closed, turn motion off in x minutes (unless cancelled due to new state)		
		motionTimer = createTimer(now.plusMinutes(motionBufferMinutes)) [|
			sendCommand(AutoLamps_Motion, OFF)
		]		
	} else {
		// If state is open, always turn motion on
		sendCommand(AutoLamps_Motion, ON)	
	}	
end

// Autolamps are suppressed during sleeping hours, these two rules control that
rule "Nighttime OFF"
when 
Time cron "0 0 6 * * ?"
then
	sendCommand(AutoLamps_NightTime, OFF)
end
rule "Nighttime ON"
when 
Time cron "0 15 22 * * ?"
then
	sendCommand(AutoLamps_NightTime, ON)
end

rule "Force on timeout"
when
Item AutoLamps_ForceOn received update
then
	if (forceOnTimer != null) {
		forceOnTimer.cancel
		forceOnTimer = null
	}

	if (AutoLamps_ForceOn.state == ON) {
		forceOnTimer = createTimer(now.plusHours(hoursBeforeForceOnTimeout)) [|
			sendCommand(AutoLamps_ForceOn, OFF)
		]				
	}
end

// The main rule, lamps on during sun down, but not sleeping hours unless motion
rule "Update autolamps"
when 
Item AutoLamps_SunElevation received update or
Item AutoLamps_Motion received update or
Item AutoLamps_NightTime received update or
Item AutoLamps_ForceOn received update
then
	var lampsOn = AutoLamps_ForceOn.state == ON ||
		(AutoLamps_SunElevation.state < sunMinElevation &&
			(AutoLamps_NightTime.state != ON || AutoLamps_Motion.state == ON)) 
	
	if (lampsOn != oldLampsOn) {
		if (lampsOn) {
			sendCommand(MAutoLamps, ON)	
		} else {
			sendCommand(MAutoLamps, OFF)
		}
	
		oldLampsOn = lampsOn
	}
end

